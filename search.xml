<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[如何爬取京东商品信息]]></title>
    <url>%2F2019%2F07%2F28%2F%E5%A6%82%E4%BD%95%E7%88%AC%E5%8F%96%E4%BA%AC%E4%B8%9C%E5%95%86%E5%93%81%E4%BF%A1%E6%81%AF%2F</url>
    <content type="text"><![CDATA[来源：【Python网络爬虫与信息提取】.MOOC. 北京理工大学地址：https://www.bilibili.com/video/av9784617/?p=15 通过 requests.get 请求页面信息，然后直接 r.text 查看即可，不涉及保存到本地。 这是在 IDLE 中的代码 在 Sublime 的全部代码如下： import requests #导入 requests 模块 url = &quot;https://item.jd.com/100000177760.html&quot; #定义 url 链接 try: #python 的 try 语句 r = requests.get(url) #请求网页 r.raise_for_status() #好像是检查状态码是否是正确的（200） r.encoding = r.apparent_encoding #不太懂，好像是换语句的 print(r.text[:1000]) #输出前 1000 字符？的数据 except: #如果不符合上面的条件 print(&quot;爬取失败&quot;) #输出失败 我们运行一下： 打开终端，输入 cd，然后将文件所在目录拖入到 cd 后面，回车。输入 python3 dj.py 回车，我们发现争取打印出了信息，说明代码正确。]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Requests</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阿姆达尔法则笔记和思考]]></title>
    <url>%2F2019%2F01%2F15%2F%E9%98%BF%E5%A7%86%E8%BE%BE%E5%B0%94%E6%B3%95%E5%88%99%E7%AC%94%E8%AE%B0%E5%92%8C%E6%80%9D%E8%80%83%2F</url>
    <content type="text"><![CDATA[注：笔记内容大多来源于吴军老师的《吴军的谷歌方法论》* 1、阿姆达尔是谁？吉恩·阿姆达尔（Gene Amdahl），被认为是有史以来最伟大的计算机设计师之一。阿姆达尔缔造了 IBM 360 的辉煌，使其在 50~60 年代统治整个大型计算机工业，奠定了 IBM 计算机帝国的江山。他是商用大型机最早的“建筑师”，是 IBM 的系统 360 大型机之父。 ![阿姆达尔](https://upload-images.jianshu.io/upload_images/2239002-f5f60481c31f50a9.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240） 2、什么是阿姆达尔法则？阿姆达尔能制造出性能如此优越的360大型机，主要归功于他研究和提出的阿姆达尔法则，他在设计大型计算机的时候，充分认识到计算机各部分的性能必须平衡匹配，才能得到整体性能最佳的系统。 经过反复试验，他得到了一个公式： ![阿姆达尔法则](https://upload-images.jianshu.io/upload_images/2239002-d0dd9b94d132db84.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240） 左边的大写的 S 代表系统最后的性能提升（加速）。 右边分母中的小写的 s，代表某一项指标的性能提升。 右边小写的 p 代表这项提升被用到的比例（或者说概率，因为在计算机中一个局部对计算时间的影响是估计出来的，因此阿姆达尔用概率 p 代表） 3、阿姆达尔法则有什么用呢？在计算机领域，阿姆达尔法则是制造计算机必须考虑的公式之一，我们通过例子来看一下。 比如我们把计算机里面内存的速度提升两倍，那么右边的小 s 就是两倍，即 s＝2，那么整个计算机性能的提升是多少呢？ 根据这个公式，可以算出是 11%。这个结果看起来还是不错的，如果你有办法将内存的速度提升到原来的 100 倍呢？那么计算机整体速度只能提升约 25%，这看上去就不大有效了。这就是这个公式的独到之处。 ![Amdahl’s Law](https://upload-images.jianshu.io/upload_images/2239002-159c047db1689320.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240） 这个定律对于计算机而言非常有用，不仅是产品设计中选择技术的准则，更是整个计算机行业里决定研发投入依据的原则。也就是说，当前如果计算机系统中的哪个部分成为了拖后腿的瓶颈，就必须集中精力和经费解决相应的问题。 阿姆达尔法则不仅在 IT 领域如此，在经济学上，特别是资源调配上也很有指导意义。而且在个人行动准则上也非常有参考意义。 我们设想，那些只能产生 1% 效果的事情，你就是把结果提高一百倍，影响力也有限；相反，那些占到了一半以上效果的事情，哪怕改进 5%，至少我们能看到 2.5% 的整体提高。 所以阿姆达尔法则完全可以用到个人的生活工作当中。 4、我的思考和感悟阿姆达尔法则在生活中，可以作为抉择时候的一个参考维度，不妨这样去思考。 哪个会给我带来更大的成长性？做哪件事情虽然开始很缓慢，但长久会发生质的飞越？短期来看，做哪件事会短期见到效果？这个效果下个阶段是否是更好的？]]></content>
      <categories>
        <category>个人思考</category>
      </categories>
      <tags>
        <tag>思考</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[漂啊飘 - 2018 年终工作总结]]></title>
    <url>%2F2019%2F01%2F08%2F%E6%BC%82%E5%95%8A%E9%A3%98%20-%202018%E5%B9%B4%E7%BB%88%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[漂啊飘~~ 这 3 个字或许是我 18 年最简单的年终总结吧 工作总结毫不掩饰的说，今年我换了三份工作，如此频繁的换工作，在这之前完全是不敢想象的，虽然每次换工作的原因不尽相同，但我知道这其中一定有相同的因素。我只是记录下来，或许有些唠叨。 今年 4 月份，我从一家三线城市做互联网教育的公司离职，选择来北京，而当初离职来北京的原因，大致为以下几点。 在工作技能成长方面。那是一家三线城市的公司，公司业务线比较多，一直在做政府相关的生意，比如官网搭建、智能工程、智慧教育等。我们的工作内容强度不是很大，大多数停留在维系和少量创造性的事情上。我的成长全靠自己学习和实践，我深知自己想获得更多更快速的成长，于是年前就有了换一个工作环境的冲动。 在公司氛围氛围上。虽然公司有 200 多人，但思想还多数偏陈旧。很多同事也并没有远期的目标（请允许我这么说），下班的时间大都是投入到娱乐中，而今年知识付费的浪潮，让我不断的想去尝试新鲜的东西，所以就略显格格不入，快速的认知提升，让我逐渐跟大家少了沟通。 结识了区块链。从 5 月份因朋友得知，到 11 月份自己开始买入，再到春节后徐老师的一句话，这个导火索彻底点燃了入局区块链领域的冲动。几番纠结后还是选择了离职。 五四青年节那天，我动身来到了北京。 截止今年底，我却到第三家公司了，每一家都是经历，都会或多或少的成长和收获。 第一家是成长最多的。这是一家 20 多人的初创公司，我在这家公司主要负责活动运营，从组织到执行，每一步自己走的都很踏实，两个月的时间非常充实。在成都和上海做了两场还不错的线下活动，以及一次不太及格的直播课裂变活动。每天忙到 11 点，在无尽的焦虑中总结和成长。 在上家公司工作两个月之后，一次偶然的机会，一位朋友邀请我去他的初创公司工作。经过不充分的调研和思考，加之上家公司工作岗位的变动和薪资稍低的原因，我选择了换工作。（对于换工作这件事，我打算专门写一篇文章，当时朋友给我的建议是公司老板最重要，我现在非常认可。） 第二家是人脉资源最多的。我来了这家朋友的公司，从 10 人发展到将近 30 人，我从运营到商务（没有坚定自己做运营的选择），而后我的工作重心开始对外，接触到了越来越多的圈内人，微信好友数增长了几百甚至上千人。参加各种活动，通过各种渠道认识自己业务的需求方，每天忙到深夜。 但过多的聊天花费了不少时间和精力，却并没有给我带来非常多的技能成长，反而现在觉得如果能有时间安静的看看书，已经是最好不过的事情了，而且对于沟通貌似有些排斥了，虽然我知道这样可能是不对的。 第三家是为了自己的情怀和期望吧。这也是一家初创公司，团队 10 个人，正在做一件可以让区块链在某些领域落地的项目。其实在这之前我已经有回到互联网公司的打算了，后面却又选择了区块链。是为了看到区块链的更多可能，我想再尝试一段时间，来这里两个月了，可以说还没有大的进展，有外部因素也有自己的原因，稍有受挫，继续努力。 漂啊飘~18 年算是体验了北漂，无论是工作、生活还是成长，这种亲身经历的感受真的很深刻。而这一年心也没有沉下来，一直飘忽不定。今年工作有太多的波折，自己在技能上没有很大的成长，现阶段算是没有达到自己来北京的预期，我勉强给自己打个 5 分吧。反思之后意识到这样的结果可能是这几个原因。 1、对于工作环境没有概念当初来北京，我只是觉得原先那个地方不再适合我继续待下去，我要换个环境，但是对于北京究竟都有哪些环境，什么样的公司环境更适合我，我是不够清晰甚至没有概念的。 所以自己在选择上就没有明确的方向，不知道如何选择适合自己的工作环境，而北京也并没有我之前想的那般美好，它也有很多不足甚至缺点，因为这个城市太大了。 2、来北京的目的不够明确正如上面所言，我只是觉得环境不适合我，我想要突破自己，想要学习更多的知识和技能，选择了来北京。但是对于究竟在哪些方面获得成长，提升到什么阶段和水平，我并没有给自己画一条清晰的线。 运营是我做了两年的事情，我到底要在哪些技能上达到什么程度的突破，没有概念。这一年报名了一期课程还做了两期助教，也没有把这件事想清楚。 3、不会做更好的选择在面临关键抉择的时候，多数没有做出更正确或更好的选择。 一个是工作的选择。前面我有提到我一位朋友给我的建议，但当时我并没有采纳，在选择工作的时候没有多维度考量，完全靠自己的主观感觉做了选择。 另一个是对于学习和时间成本的选择。吴军老师在《吴军的谷歌方法论》中提到一个计算机领域的名词「阿姆达尔法则」，它说对于做事也是一样。 对于个人而言，阿姆达尔法则也是我决定该做什么事情，不该做什么事情的原则。那些只能产生1%效果的事情，你就是把结果提高一百倍，影响力也有限；相反，那些占到了一半以上效果的事情，哪怕改进5%，至少我们能看到2.5%的整体提高。 我想我就是没有做好这种选择，把时间花费在了那些可能只能产生 1% 效果的事情上。对于这个法则再写一篇文章也不为过。 19 年我希望是这两个字，静而定。 感谢~]]></content>
      <categories>
        <category>个人思考</category>
      </categories>
      <tags>
        <tag>年终总结</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML 学习笔记]]></title>
    <url>%2F2018%2F12%2F31%2FHTML%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[HTML 基础超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。可以使用 HTML 来建立自己的 WEB 站点，HTML 运行在浏览器上，由浏览器来解析。 &lt;!DOCTYPE html&gt; 声明为 HTML5 文档 // 代码开头的标准格式 元素是 HTML 页面的根元素 元素包含了文档的元（meta）数据，如 定义网页编码格式为 utf-8。 // 支持中文 元素描述了文档的标题 元素包含了可见的页面内容 元素定义一个大标题 元素定义一个段落 例子 1234567891011121314&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;页面标题&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;我的第一个标题&lt;/h1&gt; &lt;p&gt;我的第一个段落。&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; HTML 编辑器对于 HTML 编辑器，我强烈推荐 Sublime，轻小快速，而且其他语言也可以写，或者使用最近很多人推荐的 VS Code，哈哈哈哈，这两款工具如何具体可以 Google，还有很多教程和玩法。 元素 标签等12345&lt;p&gt;&lt;/p&gt; 段落&lt;a href=&quot;xxx.htm&quot;&gt;&lt;/a&gt; 链接&lt;br&gt; 换行&lt;hr&gt; 水平线&lt;!--文字--&gt; 注释 文本格式化标签1234&lt;b&gt; 定义粗体文本&lt;em&gt; 定义着重文字&lt;i&gt; 定义斜体字&lt;small&gt; 定义小号字 链接语法123&lt;a href=&quot;url&quot;&gt;链接文本&lt;/a&gt;例如：&lt;a href=&quot;http://www.runoob.com/&quot;&gt;访问菜鸟教程&lt;/a&gt; // 访问菜鸟网络 加入 target 属性，可以定义被链接的文档在何处显示 1&lt;a href=&quot;http://www.runoob.com/&quot; target=&quot;_blank&quot;&gt;访问菜鸟教程!&lt;/a&gt; // _blank 就是在新标签页打开 如果填写的是邮箱地址，可以在地址前加入 mailto: 这样可以直接唤起自带的邮箱软件，并自动填入地址。 参数 描述 mailto:*name@gmail.com* 邮件接收地址 HTML 元素123456&lt;title&gt; 标签定义了不同文档的标题。&lt;base&gt; 标签描述了基本的链接地址/链接目标。&lt;link&gt; 标签定义了文档与外部资源之间的关系。&lt;style&gt; 标签定义了HTML文档的样式文件引用地址，可以渲染网页。&lt;meta&gt; 标签提供了元数据，元数据也不显示在页面上，但会被浏览器解析。&lt;script&gt; 标签用于加载脚本文件，如： JavaScript。 如何使用CSSCSS 是在 HTML 4 开始使用的，是为了更好的渲染HTML元素而引入的，CSS 可以通过以下方式添加到HTML中: 内联样式- 在HTML元素中使用”style” 属性 内部样式表 -在HTML文档头部 区域使用 元素 来包含CSS 外部引用 - 使用外部 CSS 文件 最好的方式是通过外部引用CSS文件。 背景色案例 1234&lt;body style=&quot;background-color:yellow;&quot;&gt;&lt;h2 style=&quot;background-color:red;&quot;&gt;这是一个标题&lt;/h2&gt;&lt;p style=&quot;background-color:green;&quot;&gt;这是一个段落。&lt;/p&gt;&lt;/body&gt; 图像标签（ ）和源属性（Src）在 HTML 中，图像由 标签定义。 是空标签，意思是说，它只包含属性，并且没有闭合标签。 1&lt;img src=&quot;url&quot; alt=&quot;some_text&quot; width=&quot;304&quot; height=&quot;228&quot;&gt; src 指 “source”。源属性的值是图像的 URL 地址。alt 属性用来为图像定义一串预备的可替换的文本。替换文本属性的值是用户定义的。height（高度） 与 width（宽度）属性用于设置图像的高度与宽度。 HTML 列表无序 1234&lt;ul&gt;&lt;li&gt;Coffee&lt;/li&gt;&lt;li&gt;Milk&lt;/li&gt;&lt;/ul&gt; 有序 1234&lt;ol&gt;&lt;li&gt;Coffee&lt;/li&gt;&lt;li&gt;Milk&lt;/li&gt;&lt;/ol&gt; 使用 元素1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt; &lt;/head&gt;&lt;body&gt; &lt;div id=&quot;container&quot; style=&quot;width:500px&quot;&gt; &lt;div id=&quot;header&quot; style=&quot;background-color:#FFA500;&quot;&gt;&lt;h1 style=&quot;margin-bottom:0;&quot;&gt;主要的网页标题&lt;/h1&gt;&lt;/div&gt; &lt;div id=&quot;menu&quot; style=&quot;background-color:#FFD700;height:200px;width:100px;float:left;&quot;&gt;&lt;b&gt;菜单&lt;/b&gt;&lt;br&gt;HTML&lt;br&gt;CSS&lt;br&gt;JavaScript&lt;/div&gt; &lt;div id=&quot;content&quot; style=&quot;background-color:#EEEEEE;height:200px;width:400px;float:left;&quot;&gt;内容在这里&lt;/div&gt; &lt;div id=&quot;footer&quot; style=&quot;background-color:#FFA500;clear:both;text-align:center;&quot;&gt;版权 © runoob.com&lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt;使用&lt;div&gt; 元素 效果图 标签 描述 定义文档区块，块级(block-level) 定义 span，用来组合文档中的行内元素。 HTML 表单表单是一个包含表单元素的区域。 表单元素是允许用户在表单中输入内容,比如：文本域(textarea)、下拉列表、单选框(radio-buttons)、复选框(checkboxes)等等，表单使用表单标签 来设置。 输入元素，多数情况下被用到的表单标签是输入标签（）。 文本域（Text Fields）通过 标签来设定，密码字段通过标签 来定义，例如： 12345&lt;form&gt;First name: &lt;input type=&quot;text&quot; name=&quot;firstname&quot;&gt;&lt;br&gt;Last name: &lt;input type=&quot;text&quot; name=&quot;lastname&quot;&gt;Password: &lt;input type=&quot;password&quot; name=&quot;pwd&quot;&gt;&lt;/form&gt; 标签定义了表单单选框选项， 定义了复选框， 定义了提交按钮。 颜色值HTML 颜色由一个十六进制符号来定义，这个符号由红色、绿色和蓝色的值组成（RGB）。有很多可以查询颜色值的网站，例如：http://www.atool.org/colorpicker.php 相对于使用rgb(255,255,0)，使用rgba(255,255,0,0.5)可以实现设置颜色透明度的功能。 字符实体 完整手册：http://www.runoob.com/tags/ref-entities.html HTML 速查列表速查列表：http://www.runoob.com/html/html-quicklist.html]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[事实与猜测，论大众信息的重要性]]></title>
    <url>%2F2018%2F12%2F28%2F%E4%BA%8B%E5%AE%9E%E4%B8%8E%E7%8C%9C%E6%B5%8B%EF%BC%8C%E8%AE%BA%E5%A4%A7%E4%BC%97%E4%BF%A1%E6%81%AF%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7%2F</url>
    <content type="text"><![CDATA[我有位朋友最近出了些情感问题，昨天电话跟我聊了挺久，而她的问题，我觉得也是大多数都遇到的情况。 而今天我恰巧在得到APP吴军老师《吴军的谷歌方法论》专栏的一封名为《皇帝的新装和“子非鱼”》来信中听到了一个概念，吴军老师称之为“大众信息”与“共有信息”。 我觉得来解释这个问题和解决办法，很合适。 朋友是位女生，她能力很强，英语超级棒，目前在一家创业公司做分析师。 她昨天找到我，因为她喜欢的一个人最近对她很冷漠，她自己不知道什么原因和如何解决。 实际上他们之间并没有说过知否喜欢对方，全部都是靠彼此之间的细节和感觉。比如他请她喝过一次奶茶，约上朋友一起吃过几次饭，送过礼物等等。 我朋友其实很早就对他有感觉，但从没有很明显的表达过（她这么跟我说），所以对方也不清楚，她对他是什么感觉。 OK，这是我朋友的故事，那这里面实际的问题是什么呢？我们一起来看吴军老师《皇帝的新装和”子非鱼“》的来信。 第一个故事 皇帝的新装在这个故事中，皇帝没有穿衣服这件事其实是一个大家都知道的事情，只是因为各种原因没有被说出来，这种信息被称为“共有信息”，也就是说你我他都知道，没有什么信息不对称的问题。当这个信息被一个孩子说出来之后，整个天就塌了。 为什么一个大家都知道的事情一旦被捅破会产生这么大的麻烦呢？从信息论的角度讲，那个孩子说的那一句话不包含任何额外信息。 这里就要提到大众信息和共有信息了。当孩子说破这件事之前，虽然每个人都知道皇帝没有穿衣衫，但是他们并不知道其他人和他有同样的看法，或者说已经得到了同样的信息，直到孩子点破这件事，大家才确定所有人都知道了这件事。也就是说，在一个和人之间有交流的环境里，每一个人是否得到了信息固然重要，每一个人都知道其他人也获得了同样的信息可能更重要。从“共有信息”到“大众信息”变化的这个过程，才是信息引起质变的过程。 我们回过头来看我朋友的苦恼。她苦恼的事情最根本的问题就是她不知道对方对她是否有意思，是否跟她一样也爱慕着对方。 而目前她所有的想法都只是她根据已有的信息所做的猜测，通过某几件事情而描绘出的另一片天空。 假设两个人都是互相爱慕的，但是都没有表白，那这种感情就可以说是共有信息，双方都无法确定对方的想法是否跟自己是一样的。 而让共有信息变为大众信息的方式，就是有任何一个人主动捅破窗户纸，表达自己与对方的感情。 子非鱼，安知鱼之乐两千多年前，庄子和惠子有一个关于“子非鱼，安知鱼之乐”的辩论。庄子讲，鱼在快乐地游水。惠子就抬杠说，你不是鱼，怎么知道鱼快乐呢？庄子就沿用惠子的逻辑说，你不是我，怎能知道我知不知道鱼快乐呢？惠子又反驳道，正因为我不是你，不知道你的想法，同样，你不是鱼，也就不知道鱼的想法。 惠子在这里面其实犯了一个逻辑错误，就是自己没有的能力，不等于别人也没有。他读不懂庄子的想法，不等于庄子读不懂鱼的想法。 我们还是看朋友的故事。他们都不是对方，如果双方都没有明确的表达自己的想法或情感，那任何一方所做的猜想，都是不够清晰明确的。 最安全的做法就是自己主动表白，或者在某个场景下直接问对方。当然这个场景要合适。 所以其实我朋友跟我说了很多内容，最核心的原因实际上就是无法确信自己的想法是否是真实的，对方是否跟自己有同样的想法。 但是女生呢，哦不，实际上男生也一样。就是对于一件自己不确定的事情，需要别人给他一个确定或者可靠的答复，可证实自己的想法，或者增加自己对想法的信息。 但其实上，这都是不可靠的，而唯一可靠的就是事实。我虽然言语上一直在安慰她，不过我也劝她，答案只有对方才知道，最直接的方式就是主动点，让所有的猜测都成为大众信息。]]></content>
      <categories>
        <category>个人思考</category>
      </categories>
      <tags>
        <tag>思考</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[什么是区块链预言机（BlockChain Oracle）]]></title>
    <url>%2F2018%2F12%2F27%2F%E4%BB%80%E4%B9%88%E6%98%AF%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A2%84%E8%A8%80%E6%9C%BA%EF%BC%88BlockChain%20Oracle%EF%BC%89%2F</url>
    <content type="text"><![CDATA[预言机 Oracle 是区块链中非常重要的一个功能，但我发现很少有人讨论，也可能很多人对此并不了解。而网上关于预言机的文章很少，很多也没有讲明白，甚至有些还是错误的。所以我整理了一篇详细的文章，分享给大家，相信看完一定会对 Oracle 有一个深层次的了解。 1、预言机（Oracle）是什么？11 月 6 日，在中国人民银行发布的《区块链能做什么？不能做什么？》的报告中，是这样对预言机定义的。 区块链外信息写入区块链内的机制，一般被称为预言机 (oracle mechanism) 。 预言机的功能就是将外界信息写入到区块链内，完成区块链与现实世界的数据互通。它允许确定的智能合约对不确定的外部世界作出反应，是智能合约与外部进行数据交互的唯一途径，也是区块链与现实世界进行数据交互的接口。 听上去很难理解，我们举例来说。 大家会很形象的把公链比作操作系统（Windows、IOS、安卓），DAPP 类比的话就是 APP，那么预言机可以形象的比做 API 接口。API 是一组定义、程序及协议的集合，通过 API 接口实现计算机软件之间的相互通信。 这样类比虽然不准确，但意思就是预言机是区块链和现实世界之间的纽带，可以实现数据互通的工具。 2、Oracle 为什么被中译为预言机？跟别人提起预言机，很多人的第一反应都是预测市场，预言机这个名字确实容易想到预测。 Oracle 最初是来源于古希腊宗教，意为“神谕、先知、预言”。而在互联网领域，预言机（英语：oracle machine），又称谕示机，是一种抽象电脑，用来研究决定型问题。可以被视为一个多了个黑盒子（预言者）的图灵机，这个黑盒子的功能是可以在单一运算之内解答特定问题。 也许你会好奇这跟甲骨文公司有什么关系吗？其实没有关系。 Oracle 在中国叫甲骨文公司的原因可能是另一个故事。在中国商朝晚期，王室把在动物骨骼或龟甲上做占卜记事的文字叫甲骨文，甲骨文被英译为 Oracle bone script，后来 Oracle 公司到中国中译为了甲骨文公司。（很有道理的猜测 哈哈哈） 3、区块链为什么需要预言机？区块链是一个确定性的、封闭的系统环境，目前区块链只能获取到链内的数据，而不能获取到链外真实世界的数据，区块链与现实世界是割裂的。 一般智能合约的执行需要触发条件，当智能合约的触发条件是外部信息时（链外），就必须需要预言机来提供数据服务，通过预言机将现实世界的数据输入到区块链上，因为智能合约不支持对外请求。 具体原因是这样的。区块链是确定性的环境，它不允许不确定的事情或因素，智能合约不管何时何地运行都必须是一致的结果，所以虚拟机（VM）不能让智能合约有 network call（网络调用），不然结果就是不确定的。 也就是说智能合约不能进行 I/O（Input/Output，即输入/输出），所以它是无法主动获取外部数据的，只能通过预言机将数据给到智能合约。 我们通过一个例子来说明一下。 假设现在我被关进了一个小黑屋里（不要多想，只是例子🌝），我对外面的世界发生了什么一无所知，不知道外面是否有人，即使呼叫也没有人回应，而我知道外界信息的方式，只有外面的人在门口把他看到的听到的都告诉我，我才可以得知。 例子虽然不太恰当，但智能合约就像这个例子中的我一样，它无论何时何地，都无法主动向外寻求信息，只能外部把消息或数据给到里面。而预言机就是这个在外面输送消息和数据的人。 好像这么看来，智能合约并不是很智能呀，是的，智能合约其实是完成的不智能的事情，即写好了条件和结果，当给它条件的时候，就可以触发，但也不会马上执行，还需要合约相关的人进行私钥签署才可以执行。 所以，网上很多文章其实都有水分，比如智能合约某个时间或者触发某个条件就可以自动执行之类的，只能说这样的句子在逻辑上可能是有问题的。关于预言机的很多文章也有水分，描述的并不准确。 好了，上面就是区块链为什么需要预言机，因为智能合约无法主动去获取链外的数据，只能被动接受数据。 4、预言机怎么解决这个问题？ 这是理想中预言机的工作流程，即用户的智能合约把请求给链上 Oracle 合约，通过链下的 API 接口获得外部数据，更确切的说是外部把数据给链上的 Oracle 合约，然后 Oracle 合约再把数据给用户的智能合约。 或许很难理解，因为在互联网中，调用数据是非常容易的，只需要在程序中写调用的代码就可以了。但是区块链与外部世界的数据交互，确实不能进行这样的操作。 5、预言机的应用场景有哪些？预言机作为区块链与现实世界进行数据交互的桥梁，应用场景非常多，可以说一切需要与链下进行数据交互的DApp都需要预言机。比如金融衍生品交易平台、借贷平台、快递追踪/IoT、稳定币、博彩游戏、保险、预测市场等等。 我们还是举例来说。 先说最近币圈比较火热的博彩游戏为什么需要预言机。博彩游戏的核心是不可预测、可验证的随机数，从而决定赌注的最终结果，但是在链上是无法生成随机数的或者说在链上的随机数是可以被预测和破解的，这时候就需要预言机从外部给智能合约安全的、不可预测的随机数。 现在的大多数博彩游戏都是在链上生成随机数，很容易被预测和破解，导致资产被盗，大家有兴趣的可以去看一下 DApp 被盗的相关研究报告，很多因为随机数问题被盗的。比如 BetDice、Dice2.Win。 如果大家很感兴趣，可以看一下我男神 DOS Network 创始人 jonny 关于《智能合约中的随机数》的分享。PPT链接：https://zhuanlan.zhihu.com/p/50219222 其实，早在 Fomo3D 这个游戏出来之后，以太坊的 Team Leader 就在推特上说过链上是无法生成随机数的。Dear devs… you can`t generate random numbers on chain！ 我们再来看一个关于快递追踪的例子。 假设当我通过某个 DApp 购物平台购买某件物品快递过来的时候，真实世界中的快递寄送或到达信息，就可以通过 Oracle 把数据传递到链上，然后触发链上的智能合约，我用自己的私钥确认收到了快递，并完成付款。 大家发现了吗？这里的智能合约不能自动执行，而是需要我用自己的私钥进行确认，智能合约保证的是没有第三方机构做担保和资金周转（比如支付宝），这就是智能合约的价值。 其他的案例就不细说了，比如稳定币需要链下的利率，保险需要链下的病例或车况等，具体可以看这篇文章《Oracle—区块链与现实世界的纽带》。 6、目前预言机项目和解决方案有哪些？目前在预言机领域探索的项目还不是很多，每一个项目的预言机解决方案都略有差异，我找了几家不同解决方案的预言机项目。 Oraclize：为以太坊提供中心化预言机服务 Oraclize 依托亚马逊 AWS 服务和 TLSNotary 技术，是一个可证明的诚实的预言机服务，不过它是中心化的，目前只能在以太坊网络使用，而且 gas 费较高。但是不妨碍它是目前比较受欢迎的预言机服务，可能也是因为没有其他更好的选择吧。 ChainLink：以太坊上第一个去中心化预言机解决方案 ChainLink 的解决方案是通过在链上的智能合约和链下的数据节点，通过奖惩机制和聚合模型的方式，进行数据的请求和馈送。不过也有一些不足，比如链式聚合成本较高，拓展性差，基于声誉系统容易集中化。 欧链 OracleChain：EOS 上的第一个去中心化预言机解决方案 欧链很早就提出了预言机的想法和方案，采用自主的 PoRD 机制（Proof-of-Reputation&amp;Deposit），本质上是一种抵押代币奖惩机制的声誉系统，奖励数据节点惩罚作恶节点，可以实现 Augur、Gnosis 等预测市场应用的功能，还能支撑对链外数据有更高频率访问需求的智能合约业务。预测市场的结果本身有时也可以作为 oracle 的输入数据源。欧链更像是预测市场，而且单纯的声誉系统容易集中化。 DOS Network：支持多条主流公链的去中心化预言机服务网络 DOS Network 是一个 Layer-2 的预言机解决方案，它通过在链上部署一个轻量级智能合约，链下是一个 p2p 网络，记账节点的选取采用 VRF+zkSNARK 技术，数据验证采用阈值签名等方式保证去中心化和数据安全，并达到快速反应。可以适配所有主流公链，比如以太坊、EOS、波场、Zilliqa。目前已在以太坊测试网发布 alpha 版本：https://dosnetwork.github.io/docs/ 看完文章是不是对区块链预言机有了更深的了解呢，区块链作为一种新兴的技术，还需要不断的探索和尝试。而预言机在其中扮演着非常重要的角色，让我们共同期待预言机技术的不断成熟，进而促进更多区块链与现实世界进行数据交互的 DApp 落地。]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
        <tag>预言机</tag>
      </tags>
  </entry>
</search>
